/*!
 * Copyright (c) Christopher Keefer, 2016.
 * https://github.com/SaneMethod/jalic 
 * jquery-ajax-localstorage-indexeddb-cache: V0.1.0.
 * This file is generated by grunt - do not edit directly.
 * Alter source files as needed, then run `grunt` in project directory.
 * Compiled: 2016-04-18 
 */


!function(a){a.ajaxTransport("+*",function(a,b,c){if(window.FormData&&(a.dataType&&("blob"==a.dataType||"arraybuffer"==a.dataType)||a.data&&(window.Blob&&a.data instanceof Blob||window.ArrayBuffer&&a.data instanceof ArrayBuffer))){var d;return{send:function(b,c){var e=a.url||window.location.href,f=a.type||"GET",g=a.dataType||"text",h=a.data||null,i=a.async||!0;d=new XMLHttpRequest,d.addEventListener("load",function(){var a={},b=d.status>=200&&d.status<300||304===d.status;b?a[g]=d.response:a.text=d.statusText,c(d.status,d.statusText,a,d.getAllResponseHeaders())}),d.open(f,e,i),d.responseType=g;for(var j in b)b.hasOwnProperty(j)&&d.setRequestHeader(j,b[j]);d.send(h)},abort:function(){d&&d.abort()}}}})}(jQuery),function(a,b){function c(a){var b=a.open("jalic",1);return b.onerror=function(a){console.log(a),f.reject(a)},b.onupgradeneeded=function(a){var b;d=a.target.result,d.onerror=function(a){console.log(a)},b=d.createObjectStore("jalicData",{keyPath:"jdName"}),b.createIndex("storedAt","storedAt",{unique:!1}),b.transaction.oncomplete=function(a){f.resolve()}},b.onsuccess=function(a){d=a.target.result,f.resolve()},f.promise()}var d,e=b.indexedDB,f=a.Deferred();if(!b.indexedDB)throw new Error("Expecting unprefixed IndexedDB support on window object.");c(e),a.jidb={setItem:function(b,c,e){var f,g=a.Deferred(),h=d.transaction(["jalicData"],"readwrite"),i=h.objectStore("jalicData");return e=e||typeof c,h.oncomplete=function(){return g.resolve()},h.onerror=function(a){return console.log(a),g.reject(a)},f=i.put({jdName:b,storedAt:+new Date,dataType:e,data:c}),f.onerror=function(a){console.log(a),g.reject(a)},g.promise()},getItem:function(b){var c=a.Deferred(),e=d.transaction(["jalicData"],"readonly"),f=e.objectStore("jalicData"),g=f.get(b);return g.onerror=function(a){console.log(a),c.reject(a)},g.onsuccess=function(a){c.resolve(g.result)},c.promise()},removeItem:function(b){var c=a.Deferred(),e=d.transaction(["jalicData"],"readwrite"),f=e.objectStore("jalicData"),g=f["delete"](b);return g.onerror=function(a){console.log(a),c.reject(a)},g.onsuccess=function(){c.resolve()},c.promise()},clear:function(){var b=a.Deferred(),d=e.deleteDatabase("jalic");return f=a.Deferred(),d.onerror=function(a){console.log(a),b.reject(a)},d.onsuccess=function(){f.done(function(){b.resolve()}),c(e)},b.promise()}}}(jQuery,window),function(a,b){var c=function(a){var b=a.url.replace(/jQuery.*/,"");return a.cache===!1&&(b=b.replace(/([?&])_=[^&]*/,"")),a.cacheKey||b+a.type+(a.data||"")},d=function(a){if(!a)return!1;if(a===!0)return b.localStorage;if("object"==typeof a&&"getItem"in a&&"removeItem"in a&&"setItem"in a)return a;throw new TypeError("localCache must either be a boolean value, or an object which implements the Storage interface.")},e=function(a,b){a.removeItem(b),a.removeItem(b+"cachettl")},f=function(b,c,d,f,g){var h=a.Deferred();try{b.setItem(c,1),b.setItem(c+"cachettl",d)}catch(i){return e(b,c),h.reject(i),h.promise()}return a.jidb.setItem(c,f,g)};a.ajaxPrefilter(function(a){var b,g,h=d(a.localCache),i=+new Date+36e5*(a.cacheTTL||5),j=c(a),k=a.isCacheValid;h&&(b=h.getItem(j+"cachettl"),k&&"function"==typeof k&&!k()&&(e(h,j),b=0),b&&b<+new Date&&(e(h,j),b=0),g=h.getItem(j),g||(a.success&&(a.realsuccess=a.success),a.success=function(b,c,d){var e=this.dataType||d.getResponseHeader("Content-Type");f(h,j,i,b,e).done(function(){a.realsuccess&&a.realsuccess(b,c,d)}).fail(function(a){console.log(a)})}))}),a.ajaxTransport("+*",function(b){if(b.localCache){var e=c(b),f=d(b.localCache),g=f?f.getItem(e):!1;if(g)return{send:function(b,c){a.jidb.getItem(e).done(function(a){var b={};b[a.dataType]=a.data,c(200,"success",b,"")}).fail(function(){c(500,"cache failure",void 0,"")})},abort:function(){console.log("Aborted ajax transport for caching.")}}}})}(jQuery,window);
//# sourceMappingURL=jalic.min.map